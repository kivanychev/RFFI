
EchoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001a4  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ea  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000627  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025c  00000000  00000000  00000fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dd  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define UART_BR             9600
#define MYUBRR              FOSC/16/UART_BR-1


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	27 97       	sbiw	r28, 0x07	; 7
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    unsigned char tmp = 0;
  aa:	1b 82       	std	Y+3, r1	; 0x03
    unsigned char *str = "Mega328\r\n";
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	9d 83       	std	Y+5, r25	; 0x05
  b2:	8c 83       	std	Y+4, r24	; 0x04
    int i = 0;
  b4:	1a 82       	std	Y+2, r1	; 0x02
  b6:	19 82       	std	Y+1, r1	; 0x01
    int len  = strlen(str);
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	9d 81       	ldd	r25, Y+5	; 0x05
  bc:	0e 94 c7 00 	call	0x18e	; 0x18e <strlen>
  c0:	9f 83       	std	Y+7, r25	; 0x07
  c2:	8e 83       	std	Y+6, r24	; 0x06
    
    tmp = (1 << PORTD1); 
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	8b 83       	std	Y+3, r24	; 0x03
    DDRD = tmp;
  c8:	8a e2       	ldi	r24, 0x2A	; 42
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2b 81       	ldd	r18, Y+3	; 0x03
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
    
    
    UCSR0A = 0x00;
  d2:	80 ec       	ldi	r24, 0xC0	; 192
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	10 82       	st	Z, r1
    UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
  da:	81 ec       	ldi	r24, 0xC1	; 193
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	28 e9       	ldi	r18, 0x98	; 152
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) + (1 << UCSZ00); // 8 bit data frame глава 20.11.4
  e4:	82 ec       	ldi	r24, 0xC2	; 194
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	26 e0       	ldi	r18, 0x06	; 6
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
    
    UBRR0 = MYUBRR;
  ee:	84 ec       	ldi	r24, 0xC4	; 196
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	27 e6       	ldi	r18, 0x67	; 103
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	31 83       	std	Z+1, r19	; 0x01
  fa:	20 83       	st	Z, r18
    
    sei();
  fc:	78 94       	sei
    while (1) 
    {
        /* Put data into buffer, sends the data */
        UDR0 = str[i];
  fe:	86 ec       	ldi	r24, 0xC6	; 198
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	29 81       	ldd	r18, Y+1	; 0x01
 104:	3a 81       	ldd	r19, Y+2	; 0x02
 106:	4c 81       	ldd	r20, Y+4	; 0x04
 108:	5d 81       	ldd	r21, Y+5	; 0x05
 10a:	24 0f       	add	r18, r20
 10c:	35 1f       	adc	r19, r21
 10e:	f9 01       	movw	r30, r18
 110:	20 81       	ld	r18, Z
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
        i++;
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	9a 83       	std	Y+2, r25	; 0x02
 11e:	89 83       	std	Y+1, r24	; 0x01
        if(i >= len)
 120:	29 81       	ldd	r18, Y+1	; 0x01
 122:	3a 81       	ldd	r19, Y+2	; 0x02
 124:	8e 81       	ldd	r24, Y+6	; 0x06
 126:	9f 81       	ldd	r25, Y+7	; 0x07
 128:	28 17       	cp	r18, r24
 12a:	39 07       	cpc	r19, r25
 12c:	14 f0       	brlt	.+4      	; 0x132 <main+0x9c>
        {
            i = 0;
 12e:	1a 82       	std	Y+2, r1	; 0x02
 130:	19 82       	std	Y+1, r1	; 0x01
        }      

        /* Wait for empty transmit buffer */
        while ( !(UCSR0A & (1<<UDRE0)) )
 132:	00 00       	nop
 134:	80 ec       	ldi	r24, 0xC0	; 192
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	80 81       	ld	r24, Z
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	80 72       	andi	r24, 0x20	; 32
 142:	99 27       	eor	r25, r25
 144:	89 2b       	or	r24, r25
 146:	b1 f3       	breq	.-20     	; 0x134 <main+0x9e>
        ;

    }             
 148:	da cf       	rjmp	.-76     	; 0xfe <main+0x68>

0000014a <__vector_18>:
}


ISR(USART_RX_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	1f 92       	push	r1
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
    unsigned char c = UDR0;
 168:	86 ec       	ldi	r24, 0xC6	; 198
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	89 83       	std	Y+1, r24	; 0x01
    //UDR0 = c;
}
 172:	00 00       	nop
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <strlen>:
 18e:	fc 01       	movw	r30, r24
 190:	01 90       	ld	r0, Z+
 192:	00 20       	and	r0, r0
 194:	e9 f7       	brne	.-6      	; 0x190 <strlen+0x2>
 196:	80 95       	com	r24
 198:	90 95       	com	r25
 19a:	8e 0f       	add	r24, r30
 19c:	9f 1f       	adc	r25, r31
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
